#lang racket
;;;;;;
; 语法结构 = 语法特性 + 当前语言的写法（或者说，scheme以这种“写法”实现了对应的“语法特性”）（而思考的时候，通常应该以语法特性，甚至是更本质的procedural thinking的方式进行，是“跨编程语言”的）
;;;;;;

;;;;;;
; 作用 - 定义 & 使用
; 具有本质区别的两类语法：一个是“先定义一个概念”，另外一个是“实际发生的一个过程”
; 分成两块，定义的都写一起，故事的都写在另外的一起
;;;;;;
; define
(define a 100)
; happen
(+ a 1)

;;;;;;
; 成分 - 过程 & 数据
;;;;;;
(+ 1 2)

;;;;;;
; expression
; 表达式种类 - 一般 & 特殊
; 一般 expression：不管它多么复杂，当 eval 的时候，一个 expression（最终会变换为）一个 value
; 特殊 expression：有各种各样的“非一般”功能，其中有一些不是用来求值的在高级语言(如js)中被叫做statement
;;;;;;
; common form
(+ 1 2)
; special form
(and #f #t)

;;;;;;
; 
;;;;;;

