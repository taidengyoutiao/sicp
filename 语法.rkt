#lang racket
;;;;;;
; 语法结构 = 语法特性 + 当前语言的写法（不要被表象（写法）所迷惑）（而思考的时候，通常应该以语法特性，甚至是更本质的procedural thinking的方式进行，是“跨编程语言”的）
;;;;;;

;;;;;;
; 读的顺序 - 上下内外左右
;;;;;;

;;;;;;
; 作用 - 定义 & 使用
; 定义：用其他“一些”概念描述这“一个”概念
; 使用：用这一个概念作为一部分去组合成一个“句子”等等
;;;;;;
; define it
(define a (+ 1 2 3))
; use it
(+ a 3 2 1)

;;;;;;
; 成分 - 过程 & 数据
;;;;;;
(+ 1 2)

;;;;;;
; expression
; 表达式种类 - 一般 & 特殊
; 一般 expression：不管它多么复杂，当 eval 的时候，一个 expression（最终会变换为）一个 value
; 特殊 expression：有各种各样的“非一般”功能，其中有一些不是用来求值的在高级语言(如js)中被叫做statement
;;;;;;
; common form
(+ 1 2)
; special form
(and #f #t)
